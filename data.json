{
  "highlightProjectData": [
    {
      "id": 0,
      "projectImageName": "gouken.png",
      "projectTitle": "Gouken",
      "tags": [],
      "links": [
        {
          "name": "Github",
          "link": "https://github.com/GameArchGinyuForce/Gouken",
          "active": true
        },
        {
          "name": "Devlog",
          "link": "./devlog/gouken",
          "active": true
        }
      ],
      "desc": "Collaborative Scheduling Web app where users can invite people to sessions via links to collaboratively plan an activity",
      "descLong":
        "Collaborative Scheduling Web app where users can invite people to sessions via links to collaboratively plan an activity. Implemented Frontend using React.js, React Bootstrap and D3. Implemented Backend using Express.js, MySQL, JSON Web Tokens and Passport.js Google Oauth.",
      "sections": [
        {
          "heading": null,
          "content": [
            "A Street Fighter Style fighting game developed for iOS using Swift and SceneKit"
          ]
        },
        {
          "heading": "Architecture",
          "content": [
            "Dynamic Hitboxes and Hurtboxes tied to animation and frame-rate",
            "Entity Component System and flow of control for events within the core update loop",
            "Input buffering solution to allow for motion inputs for special moves",
            "Multipeer Networking",
            "Character State Machines"
          ]
        }
      ]
    },
    {
      "id": 0,
      "projectImageName": "lastblast.png",
      "projectTitle": "Last Blast",
      "tags": [],
      "links": [
        {
          "name": "Itch.io",
          "link": "https://sepehrman.itch.io/last-blast",
          "active": true
        },
        {
          "name": "Trailer",
          "link": "https://youtu.be/bSAaRPYsSNg?si=NDPR0Ve5SRdzcvMD",
          "active": true
        }
      ],
      "desc": "Collaborative Scheduling Web app where users can invite people to sessions via links to collaboratively plan an activity",
      "descLong":
        "Collaborative Scheduling Web app where users can invite people to sessions via links to collaboratively plan an activity. Implemented Frontend using React.js, React Bootstrap and D3. Implemented Backend using Express.js, MySQL, JSON Web Tokens and Passport.js Google Oauth.",
      "sections": [
        {
          "heading": null,
          "content": [
            "A run-and-gun style FPS game using Unity and C#"
          ]
        },
        {
          "heading": null,
          "content": [
            "Fight through hordes of guards, snipers, exploders and tanks as fast as you can by using all the different tools available to you!",
            "Use the Blast mechanic to propel yourself through the level at the cost of a bullet!",
            "Line up your shots and enemies hidden behind obstacles with bullet time!",
            "Enhance your abilities with power ups!"
          ]
        }
      ]
    },
    {
      "id": 0,
      "projectImageName": "wordtrack.png",
      "projectTitle": "Word Track",
      "tags": [],
      "links": [
        {
          "name": "Live",
          "link": "https://word-track-seven.vercel.app/",
          "active": true
        },
        {
          "name": "Github",
          "link": "https://github.com/Sepehrman/WordTrack",
          "active": true
        }
      ],
      "desc": "Collaborative Scheduling Web app where users can invite people to sessions via links to collaboratively plan an activity",
      "descLong":
        "Collaborative Scheduling Web app where users can invite people to sessions via links to collaboratively plan an activity. Implemented Frontend using React.js, React Bootstrap and D3. Implemented Backend using Express.js, MySQL, JSON Web Tokens and Passport.js Google Oauth.",
      "sections": [
        {
          "heading": null,
          "content": [
            "A React web application that functions as a dictionary, cue card generator and note taking application focused on helping users learn new words they encounter"
          ]
        },
        {
          "heading": null,
          "content": [
            "Implemented web app using React.js and Google Firebase, and conducted acceptance, black-box and QA testing with Cypress to ensure its functionality",
            "My Favorite Feature: Word of the Day"
          ]
        }
      ]
    },
    {
      "id": 1,
      "projectImageName": "scheduler.png",
      "projectTitle": "Collaborative Scheduler",
      "tags": [
        { "tag": "React.js", "color": "lightblue" },
        { "tag": "Express", "color": "lightgreen" },
        { "tag": "Passport.js", "color": "lightgreen" },
        { "tag": "JWT", "color": "lightgreen" },
        { "tag": "Javascript", "color": "lightgreen" },
        { "tag": "MySQL", "color": "lightgreen" },
        { "tag": "Sass", "color": "pink" }
      ],
      "links": [
        {
          "name": "Github",
          "link": "https://github.com/nathand2/scheduling-web-app",
          "active": true
        }
      ],
      "desc": "Collaborative Scheduling Web app where users can invite people to sessions via links to collaboratively plan an activity",
      "descLong":
        "Collaborative Scheduling Web app where users can invite people to sessions via links to collaboratively plan an activity. Implemented Frontend using React.js, React Bootstrap and D3. Implemented Backend using Express.js, MySQL, JSON Web Tokens and Passport.js Google Oauth.",
      "sections": [
        {
          "heading": null,
          "content": [
            "Collaborative Scheduling Web app where users can invite people to sessions via links to collaboratively plan an activity"
          ]
        },
        {
          "heading": "What problem does this solve?",
          "content": [
            "Discussing plans with people using strict start times is inflexible and leads to a lot of back and forth. Instead of endless re-adjusting the plans to fit everyones needs, instead, everyone can just say what time they are available. Everyone can see when everyone else is available and can then make plans accordingly"
          ]
        },
        {
          "heading": "Frontend:",
          "content": ["React.js, ReactBootstrap, D3"]
        },
        {
          "heading": "Backend:",
          "content": ["Node.js, Express.js, JSON Web Tokens, Passport.js, MySQL"]
        }
      ]
    }
  ],
  "projectData": [
    {
      "id": 0,
      "projectImageName": "gouken.png",
      "projectTitle": "Gouken",
      "tags": [],
      "links": [
        {
          "name": "Github",
          "link": "https://github.com/GameArchGinyuForce/Gouken",
          "active": true
        }
      ],
      "desc": "Collaborative Scheduling Web app where users can invite people to sessions via links to collaboratively plan an activity",
      "descLong":
        "Collaborative Scheduling Web app where users can invite people to sessions via links to collaboratively plan an activity. Implemented Frontend using React.js, React Bootstrap and D3. Implemented Backend using Express.js, MySQL, JSON Web Tokens and Passport.js Google Oauth.",
      "sections": [
        {
          "heading": null,
          "content": [
            "A Street Fighter Style fighting game developed for iOS using Swift and SceneKit"
          ]
        },
        {
          "heading": "Architecture",
          "content": [
            "Dynamic Hitboxes and Hurtboxes tied to animation and frame-rate",
            "Entity Component System and flow of control for events within the core update loop",
            "Input buffering solution to allow for motion inputs for special moves",
            "Multipeer Networking",
            "Character State Machines"
          ]
        }
      ]
    },
    {
      "id": 0,
      "projectImageName": "lastblast.png",
      "projectTitle": "Last Blast",
      "tags": [],
      "links": [
        {
          "name": "Itch.io",
          "link": "https://sepehrman.itch.io/last-blast",
          "active": true
        },
        {
          "name": "Trailer",
          "link": "https://youtu.be/bSAaRPYsSNg?si=NDPR0Ve5SRdzcvMD",
          "active": true
        }
      ],
      "desc": "Collaborative Scheduling Web app where users can invite people to sessions via links to collaboratively plan an activity",
      "descLong":
        "Collaborative Scheduling Web app where users can invite people to sessions via links to collaboratively plan an activity. Implemented Frontend using React.js, React Bootstrap and D3. Implemented Backend using Express.js, MySQL, JSON Web Tokens and Passport.js Google Oauth.",
      "sections": [
        {
          "heading": null,
          "content": [
            "A run-and-gun style FPS game using Unity and C#"
          ]
        },
        {
          "heading": null,
          "content": [
            "Fight through hordes of guards, snipers, exploders and tanks as fast as you can by using all the different tools available to you!",
            "Use the Blast mechanic to propel yourself through the level at the cost of a bullet!",
            "Line up your shots and enemies hidden behind obstacles with bullet time!",
            "Enhance your abilities with power ups!"
          ]
        }
      ]
    },
    {
      "id": 0,
      "projectImageName": "wordtrack.png",
      "projectTitle": "Word Track",
      "tags": [],
      "links": [
        {
          "name": "Live",
          "link": "https://word-track-seven.vercel.app/",
          "active": true
        }
      ],
      "desc": "Collaborative Scheduling Web app where users can invite people to sessions via links to collaboratively plan an activity",
      "descLong":
        "Collaborative Scheduling Web app where users can invite people to sessions via links to collaboratively plan an activity. Implemented Frontend using React.js, React Bootstrap and D3. Implemented Backend using Express.js, MySQL, JSON Web Tokens and Passport.js Google Oauth.",
      "sections": [
        {
          "heading": null,
          "content": [
            "A React web application that functions as a dictionary, cue card generator and note taking application focused on helping users learn new words they encounter"
          ]
        },
        {
          "heading": null,
          "content": [
            "Implemented web app using React.js and Google Firebase, and conducted acceptance, black-box and QA testing with Cypress to ensure its functionality",
            "My Favorite Feature: Word of the Day"
          ]
        }
      ]
    },
    {
      "id": 0,
      "projectImageName": "scheduler.png",
      "projectTitle": "Collaborative Scheduler",
      "tags": [
        { "tag": "React.js", "color": "lightblue" },
        { "tag": "Express", "color": "lightgreen" },
        { "tag": "Passport.js", "color": "lightgreen" },
        { "tag": "JWT", "color": "lightgreen" },
        { "tag": "Javascript", "color": "lightgreen" },
        { "tag": "MySQL", "color": "lightgreen" },
        { "tag": "Sass", "color": "pink" }
      ],
      "links": [
        {
          "name": "Github",
          "link": "https://github.com/nathand2/scheduling-web-app",
          "active": true
        }
      ],
      "desc": "Collaborative Scheduling Web app where users can invite people to sessions via links to collaboratively plan an activity",
      "descLong":
        "Collaborative Scheduling Web app where users can invite people to sessions via links to collaboratively plan an activity. Implemented Frontend using React.js, React Bootstrap and D3. Implemented Backend using Express.js, MySQL, JSON Web Tokens and Passport.js Google Oauth.",
      "sections": [
        {
          "heading": null,
          "content": [
            "Collaborative Scheduling Web app where users can invite people to sessions via links to collaboratively plan an activity"
          ]
        },
        {
          "heading": "What problem does this solve?",
          "content": [
            "Discussing plans with people using strict start times is inflexible and leads to a lot of back and forth. Instead of endless re-adjusting the plans to fit everyones needs, instead, everyone can just say what time they are available. Everyone can see when everyone else is available and can then make plans accordingly"
          ]
        },
        {
          "heading": "Frontend:",
          "content": ["React.js, ReactBootstrap, D3"]
        },
        {
          "heading": "Backend:",
          "content": ["Node.js, Express.js, JSON Web Tokens, Passport.js, MySQL"]
        }
      ]
    },
    {
      "id": 1,
      "projectImageName": "tasktracker.png",
      "projectTitle": "Task Tracker",
      "tags": [
        { "tag": "Express", "color": "lightgreen" },
        { "tag": "Javascript", "color": "lightgreen" },
        { "tag": "PostgresSQL", "color": "lightgreen" },
        { "tag": "React", "color": "lightblue" },
        { "tag": "Sass", "color": "pink" },
        { "tag": "CSS", "color": "pink" }
      ],
      "links": [
        {
          "name": "Github(Frontend)",
          "link": "https://github.com/NathanD2/Task_Tracker_Frontend",
          "active": true
        },
        {
          "name": "Github(Backend)",
          "link": "https://github.com/NathanD2/Task_Tracker_Backend",
          "active": true
        }
      ],
      "desc": "Task Tracker Web Application created using a microarchitecture approach with a RESTful API.",
      "descLong":
        "Task Tracker Web Application created using a microarchitecture approach with a RESTful API. Currently, everyone with access to the web app shares the same task tracker. Next Steps: Authentication and Users.",
      "sections": [
        {
          "heading": null,
          "content": [
            "Task Tracker Web Application created using a microarchitecture approach with a RESTful API. Currently, everyone with access to the web app shares the same task tracker."
          ]
        },
        {
          "heading": "Frontend:",
          "content": ["React.js, SASS"]
        },
        {
          "heading": "Backend:",
          "content": ["Node.js, Express.js, PostgreSQL"]
        }
      ]
    },
    {
      "id": 3,
      "projectImageName": "craigslist-rental-data.png",
      "projectTitle": "Craigslist Rental Data",
      "tags": [
        { "tag": "Python", "color": "LemonChiffon" },
        { "tag": "Numpy", "color": "lightgreen" },
        { "tag": "pandas", "color": "grey" },
        { "tag": "seaborn", "color": "cadetblue" }
      ],
      "links": [
        {
          "name": "Github",
          "link": "https://github.com/nathand2/craigslist_rental_data_vancouver",
          "active": true
        }
      ],
      "desc": "Generated Vancouver Rental price dataset using Craigslist web scrapping, pre-processed/cleaned the dataset and analyzed the dataset. Implemented using Python, NumPy, pandas, Seaborn and matplotlib.",
      "descLong": "Long description",
      "sections": [
        {
          "heading": null,
          "content": [
            "Generated Vancouver Rental price dataset using Craigslist web scrapping, pre-processed/cleaned the dataset and analyzed the dataset."
          ]
        },
        {
          "heading": "Implementation: Python",
          "content": [
            "Libraries: numpy, pandas, matplotlib, seaborn"
          ]
        }
      ]
    },
    {
      "id": 3,
      "projectImageName": "bank-fam-system.jpg",
      "projectTitle": "Bank FAM System",
      "links": [
        {
          "name": "Github",
          "link": "https://github.com/NathanD2/bank_fam_system",
          "active": true
        }
      ],
      "tags": [
        { "tag": "Python", "color": "LemonChiffon" },
        { "tag": "Object-Oriented Programming", "color": "lightblue" }
      ],
      "desc": "The FAM system is a parental control lock on an individual's bank account. The system can register users, keep track of all spending/transactions of their bank accounts and lock accounts if certain conditions are met.",
      "descLong":
        "The FAM system is a parental control lock on an individual's bank account. The system can register users, keep track of all spending/transactions of their bank accounts and lock accounts if certain conditions are met. Different account types provide differing levels of moderation in addition to each having allocated budgets to 4 categories (Games and Entertainment, Clothing and Accessories, Eating Out, and Miscellaneous)",
      "sections": [
        {
          "heading": null,
          "content": [
            "The FAM system is a parental control lock on an individual's bank account. The system can register users, keep track of all spending/transactions of their bank accounts and lock accounts if certain conditions are met. Different account types provide differing levels of moderation in addition to each having allocated budgets to 4 categories (Games and Entertainment, Clothing and Accessories, Eating Out, and Miscellaneous)"
          ]
        },
        {
          "heading": "Implementation: Python",
          "content": []
        }
      ]
    },
    {
      "id": 4,
      "projectImageName": "pokeretriever.png",
      "projectTitle": "PokeRetriever",
      "links": [
        {
          "name": "Github",
          "link": "https://github.com/NathanD2/pokeretriever",
          "active": true
        }
      ],
      "tags": [
        { "tag": "Python", "color": "LemonChiffon" },
        { "tag": "Object-Oriented Programming", "color": "lightblue" }
      ],
      "desc": "Uses Object-Oriented programming with command-line parsing for asynchronous HTTP requests to PokeAPI. API data transformed into Python objects with information presented via console or output txt file.",
      "descLong":
        "Uses Object-Oriented programming with command-line parsing for asynchronous HTTP requests to PokeAPI. API data transformed into Python objects with information presented via console or output txt file. API Information: https://pokeapi.co/docs/v2",
      "sections": [
        {
          "heading": null,
          "content": [
            "Uses Object-Oriented programming with command-line parsing for asynchronous HTTP requests to PokeAPI. API data transformed into Python objects with information presented via console or output txt file. API Information: https://pokeapi.co/docs/v2"
          ]
        },
        {
          "heading": "Implementation: Python",
          "content": []
        }
      ]
    }
  ]
} 

